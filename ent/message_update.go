// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"discord-metrics-server/v2/ent/message"
	"discord-metrics-server/v2/ent/predicate"
	"discord-metrics-server/v2/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetContents sets the "contents" field.
func (mu *MessageUpdate) SetContents(s string) *MessageUpdate {
	mu.mutation.SetContents(s)
	return mu
}

// SetNillableContents sets the "contents" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableContents(s *string) *MessageUpdate {
	if s != nil {
		mu.SetContents(*s)
	}
	return mu
}

// SetSentAt sets the "sent_at" field.
func (mu *MessageUpdate) SetSentAt(t time.Time) *MessageUpdate {
	mu.mutation.SetSentAt(t)
	return mu
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSentAt(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetSentAt(*t)
	}
	return mu
}

// SetSenderID sets the "sender_id" field.
func (mu *MessageUpdate) SetSenderID(i int) *MessageUpdate {
	mu.mutation.SetSenderID(i)
	return mu
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSenderID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetSenderID(*i)
	}
	return mu
}

// SetMessageID sets the "message_id" field.
func (mu *MessageUpdate) SetMessageID(s string) *MessageUpdate {
	mu.mutation.SetMessageID(s)
	return mu
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableMessageID(s *string) *MessageUpdate {
	if s != nil {
		mu.SetMessageID(*s)
	}
	return mu
}

// SetChannelID sets the "channel_id" field.
func (mu *MessageUpdate) SetChannelID(s string) *MessageUpdate {
	mu.mutation.SetChannelID(s)
	return mu
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableChannelID(s *string) *MessageUpdate {
	if s != nil {
		mu.SetChannelID(*s)
	}
	return mu
}

// SetInReplyToID sets the "in_reply_to_id" field.
func (mu *MessageUpdate) SetInReplyToID(i int) *MessageUpdate {
	mu.mutation.SetInReplyToID(i)
	return mu
}

// SetNillableInReplyToID sets the "in_reply_to_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableInReplyToID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetInReplyToID(*i)
	}
	return mu
}

// ClearInReplyToID clears the value of the "in_reply_to_id" field.
func (mu *MessageUpdate) ClearInReplyToID() *MessageUpdate {
	mu.mutation.ClearInReplyToID()
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MessageUpdate) SetCreatedAt(t time.Time) *MessageUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableCreatedAt(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MessageUpdate) SetUpdatedAt(t time.Time) *MessageUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetSender sets the "sender" edge to the User entity.
func (mu *MessageUpdate) SetSender(u *User) *MessageUpdate {
	return mu.SetSenderID(u.ID)
}

// SetInReplyTo sets the "in_reply_to" edge to the Message entity.
func (mu *MessageUpdate) SetInReplyTo(m *Message) *MessageUpdate {
	return mu.SetInReplyToID(m.ID)
}

// AddResponderIDs adds the "responders" edge to the Message entity by IDs.
func (mu *MessageUpdate) AddResponderIDs(ids ...int) *MessageUpdate {
	mu.mutation.AddResponderIDs(ids...)
	return mu
}

// AddResponders adds the "responders" edges to the Message entity.
func (mu *MessageUpdate) AddResponders(m ...*Message) *MessageUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddResponderIDs(ids...)
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (mu *MessageUpdate) ClearSender() *MessageUpdate {
	mu.mutation.ClearSender()
	return mu
}

// ClearInReplyTo clears the "in_reply_to" edge to the Message entity.
func (mu *MessageUpdate) ClearInReplyTo() *MessageUpdate {
	mu.mutation.ClearInReplyTo()
	return mu
}

// ClearResponders clears all "responders" edges to the Message entity.
func (mu *MessageUpdate) ClearResponders() *MessageUpdate {
	mu.mutation.ClearResponders()
	return mu
}

// RemoveResponderIDs removes the "responders" edge to Message entities by IDs.
func (mu *MessageUpdate) RemoveResponderIDs(ids ...int) *MessageUpdate {
	mu.mutation.RemoveResponderIDs(ids...)
	return mu
}

// RemoveResponders removes "responders" edges to Message entities.
func (mu *MessageUpdate) RemoveResponders(m ...*Message) *MessageUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveResponderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MessageUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MessageUpdate) check() error {
	if _, ok := mu.mutation.SenderID(); mu.mutation.SenderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.sender"`)
	}
	return nil
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Contents(); ok {
		_spec.SetField(message.FieldContents, field.TypeString, value)
	}
	if value, ok := mu.mutation.SentAt(); ok {
		_spec.SetField(message.FieldSentAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.MessageID(); ok {
		_spec.SetField(message.FieldMessageID, field.TypeString, value)
	}
	if value, ok := mu.mutation.ChannelID(); ok {
		_spec.SetField(message.FieldChannelID, field.TypeString, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(message.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.InReplyToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.InReplyToTable,
			Columns: []string{message.InReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.InReplyToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.InReplyToTable,
			Columns: []string{message.InReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RespondersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RespondersTable,
			Columns: []string{message.RespondersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedRespondersIDs(); len(nodes) > 0 && !mu.mutation.RespondersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RespondersTable,
			Columns: []string{message.RespondersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RespondersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RespondersTable,
			Columns: []string{message.RespondersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetContents sets the "contents" field.
func (muo *MessageUpdateOne) SetContents(s string) *MessageUpdateOne {
	muo.mutation.SetContents(s)
	return muo
}

// SetNillableContents sets the "contents" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableContents(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetContents(*s)
	}
	return muo
}

// SetSentAt sets the "sent_at" field.
func (muo *MessageUpdateOne) SetSentAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetSentAt(t)
	return muo
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSentAt(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetSentAt(*t)
	}
	return muo
}

// SetSenderID sets the "sender_id" field.
func (muo *MessageUpdateOne) SetSenderID(i int) *MessageUpdateOne {
	muo.mutation.SetSenderID(i)
	return muo
}

// SetNillableSenderID sets the "sender_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSenderID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetSenderID(*i)
	}
	return muo
}

// SetMessageID sets the "message_id" field.
func (muo *MessageUpdateOne) SetMessageID(s string) *MessageUpdateOne {
	muo.mutation.SetMessageID(s)
	return muo
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableMessageID(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetMessageID(*s)
	}
	return muo
}

// SetChannelID sets the "channel_id" field.
func (muo *MessageUpdateOne) SetChannelID(s string) *MessageUpdateOne {
	muo.mutation.SetChannelID(s)
	return muo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableChannelID(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetChannelID(*s)
	}
	return muo
}

// SetInReplyToID sets the "in_reply_to_id" field.
func (muo *MessageUpdateOne) SetInReplyToID(i int) *MessageUpdateOne {
	muo.mutation.SetInReplyToID(i)
	return muo
}

// SetNillableInReplyToID sets the "in_reply_to_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableInReplyToID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetInReplyToID(*i)
	}
	return muo
}

// ClearInReplyToID clears the value of the "in_reply_to_id" field.
func (muo *MessageUpdateOne) ClearInReplyToID() *MessageUpdateOne {
	muo.mutation.ClearInReplyToID()
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MessageUpdateOne) SetCreatedAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableCreatedAt(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MessageUpdateOne) SetUpdatedAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetSender sets the "sender" edge to the User entity.
func (muo *MessageUpdateOne) SetSender(u *User) *MessageUpdateOne {
	return muo.SetSenderID(u.ID)
}

// SetInReplyTo sets the "in_reply_to" edge to the Message entity.
func (muo *MessageUpdateOne) SetInReplyTo(m *Message) *MessageUpdateOne {
	return muo.SetInReplyToID(m.ID)
}

// AddResponderIDs adds the "responders" edge to the Message entity by IDs.
func (muo *MessageUpdateOne) AddResponderIDs(ids ...int) *MessageUpdateOne {
	muo.mutation.AddResponderIDs(ids...)
	return muo
}

// AddResponders adds the "responders" edges to the Message entity.
func (muo *MessageUpdateOne) AddResponders(m ...*Message) *MessageUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddResponderIDs(ids...)
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (muo *MessageUpdateOne) ClearSender() *MessageUpdateOne {
	muo.mutation.ClearSender()
	return muo
}

// ClearInReplyTo clears the "in_reply_to" edge to the Message entity.
func (muo *MessageUpdateOne) ClearInReplyTo() *MessageUpdateOne {
	muo.mutation.ClearInReplyTo()
	return muo
}

// ClearResponders clears all "responders" edges to the Message entity.
func (muo *MessageUpdateOne) ClearResponders() *MessageUpdateOne {
	muo.mutation.ClearResponders()
	return muo
}

// RemoveResponderIDs removes the "responders" edge to Message entities by IDs.
func (muo *MessageUpdateOne) RemoveResponderIDs(ids ...int) *MessageUpdateOne {
	muo.mutation.RemoveResponderIDs(ids...)
	return muo
}

// RemoveResponders removes "responders" edges to Message entities.
func (muo *MessageUpdateOne) RemoveResponders(m ...*Message) *MessageUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveResponderIDs(ids...)
}

// Where appends a list predicates to the MessageUpdate builder.
func (muo *MessageUpdateOne) Where(ps ...predicate.Message) *MessageUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MessageUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MessageUpdateOne) check() error {
	if _, ok := muo.mutation.SenderID(); muo.mutation.SenderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.sender"`)
	}
	return nil
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Contents(); ok {
		_spec.SetField(message.FieldContents, field.TypeString, value)
	}
	if value, ok := muo.mutation.SentAt(); ok {
		_spec.SetField(message.FieldSentAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.MessageID(); ok {
		_spec.SetField(message.FieldMessageID, field.TypeString, value)
	}
	if value, ok := muo.mutation.ChannelID(); ok {
		_spec.SetField(message.FieldChannelID, field.TypeString, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(message.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.InReplyToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.InReplyToTable,
			Columns: []string{message.InReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.InReplyToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.InReplyToTable,
			Columns: []string{message.InReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RespondersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RespondersTable,
			Columns: []string{message.RespondersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedRespondersIDs(); len(nodes) > 0 && !muo.mutation.RespondersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RespondersTable,
			Columns: []string{message.RespondersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RespondersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RespondersTable,
			Columns: []string{message.RespondersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
